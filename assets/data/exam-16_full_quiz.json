{
  "title": "Certification Java 21 - Style OCP-830 - 50 Questions Niveau Expert",
  "duration": 120,
  "metadata": {
    "id": "exam-16_full_quiz.json",
    "mainTopic": "full",
    "category": "full",
    "examNumber": "F2",
    "examName": "Examen blanc complet N°2",
    "questionsCount": 50,
    "description": "50 questions • Tous thèmes"
  },
  "questions": [
    {
      "topic": "Modules",
      "type": "single",
      "question": "Given the following module definition:<br><pre><code class='language-java'>//In file module-info.java\nmodule com.banking {\n    exports com.banking.account to com.banking.web, com.banking.mobile;\n    requires transitive java.sql;\n    uses com.banking.spi.PaymentProvider;\n}</code></pre><br>Which statement is correct?",
      "options": [
        "The module exports com.banking.account to all modules",
        "Modules that require com.banking will automatically have access to java.sql",
        "The module can use ServiceLoader to load PaymentProvider implementations",
        "All three statements are correct",
        "Only statements 2 and 3 are correct",
        "The module definition will not compile"
      ],
      "answer": 4,
      "difficulty": "expert",
      "explanation": "exports...to creates a qualified export (not to all modules). requires transitive makes java.sql available to modules requiring com.banking. uses declares service consumption. Statements 2 and 3 are correct."
    },
    {
      "topic": "Records",
      "type": "multiple",
      "question": "Which of the following record definitions are valid?<br><pre><code class='language-java'>record Person(String name, int age) {\n    public Person {\n        if(age < 0) throw new IllegalArgumentException();\n    }\n}</code></pre>",
      "options": [
        "record Person(String name, int age) { private int id = 100; }",
        "record Person(String name, int age) { static int count = 0; }",
        "record Person(String name, int age) { public String name() { return name.toUpperCase(); } }",
        "abstract record Person(String name, int age) { }",
        "record Person(String name, int age) implements Serializable { }",
        "record Person(final String name, int age) { }"
      ],
      "answer": [1, 2, 4],
      "difficulty": "expert",
      "explanation": "Records can have static fields, override accessors, and implement interfaces. They cannot have non-static instance fields (beyond components), be abstract, or use modifiers on components."
    },
    {
      "topic": "Streams",
      "type": "single",
      "question": "What will the following code print?<br><pre><code class='language-java'>List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\nint result = numbers.parallelStream()\n    .reduce(0, (a, b) -> a + b, (a, b) -> a * b);\nSystem.out.println(result);</code></pre>",
      "options": [
        "<code>15</code>",
        "<code>0</code>",
        "A result less than 15",
        "A result greater than 15",
        "The result is unpredictable",
        "Compilation error"
      ],
      "answer": 4,
      "difficulty": "expert",
      "explanation": "The accumulator adds (sum), but the combiner multiplies. This inconsistency causes unpredictable results in parallel streams as partial sums are multiplied instead of added together."
    },
    {
      "topic": "Exception Handling",
      "type": "single",
      "question": "What will be the output?<br><pre><code class='language-java'>public class TestClass {\n    public static void main(String[] args) {\n        try {\n            System.out.print(\"A\");\n            throw new RuntimeException();\n        } catch (RuntimeException e) {\n            System.out.print(\"B\");\n            throw new NullPointerException();\n        } catch (Exception e) {\n            System.out.print(\"C\");\n        } finally {\n            System.out.print(\"D\");\n        }\n        System.out.print(\"E\");\n    }\n}</code></pre>",
      "options": [
        "<code>ABCDE</code>",
        "<code>ABD</code> then exception thrown",
        "<code>ABDE</code>",
        "<code>ABC</code>",
        "<code>AD</code> then exception thrown",
        "Compilation error"
      ],
      "answer": 1,
      "difficulty": "expert",
      "explanation": "A prints, RuntimeException caught, B prints, NullPointerException thrown from catch block, finally executes (D prints), then exception propagates. E is never reached."
    },
    {
      "topic": "Collections",
      "type": "multiple",
      "question": "Given:<br><pre><code class='language-java'>List<String> list = Arrays.asList(\"A\", \"B\", \"C\");\nIterator<String> it1 = list.iterator();\nIterator<String> it2 = list.iterator();</code></pre><br>Which operations will cause ConcurrentModificationException?",
      "options": [
        "<code>list.remove(0);</code> followed by <code>it1.next();</code>",
        "<code>it1.next(); it1.remove();</code> followed by <code>it2.next();</code>",
        "<code>list.set(0, \"X\");</code> followed by <code>it1.next();</code>",
        "<code>list.add(\"D\");</code> followed by <code>it1.next();</code>",
        "<code>Collections.reverse(list);</code> followed by <code>it1.next();</code>",
        "None will cause an exception"
      ],
      "answer": [0, 3],
      "difficulty": "expert",
      "explanation": "Arrays.asList() returns a fixed-size list. remove() and add() throw UnsupportedOperationException first. But if the list were modifiable, structural modifications (add/remove) would trigger ConcurrentModificationException on subsequent iterator use. set() and reverse() don't cause it."
    },
    {
      "topic": "Sealed Classes",
      "type": "single",
      "question": "Given:<br><pre><code class='language-java'>sealed class Vehicle permits Car, Truck { }\nfinal class Car extends Vehicle { }\nnon-sealed class Truck extends Vehicle { }\nclass PickupTruck extends Truck { }</code></pre><br>What is the result of this code?<br><pre><code class='language-java'>Vehicle v = new PickupTruck();\nString type = switch(v) {\n    case Car c -> \"car\";\n    case Truck t -> \"truck\";\n};\nSystem.out.println(type);</code></pre>",
      "options": [
        "<code>car</code>",
        "<code>truck</code>",
        "Compilation error - missing default case",
        "Compilation error - PickupTruck not in permits",
        "Runtime error - ClassCastException",
        "Compilation error - non-sealed breaks exhaustiveness"
      ],
      "answer": 5,
      "difficulty": "expert",
      "explanation": "With non-sealed classes, the hierarchy is open and switch exhaustiveness cannot be guaranteed. The compiler requires a default case or explicit handling of all possible subclasses."
    },
    {
      "topic": "Localization",
      "type": "single",
      "question": "Given these resource bundle files:<br>messages.properties: <code>greeting=Hello</code><br>messages_fr.properties: <code>greeting=Bonjour</code><br>messages_fr_CA.properties: <code>farewell=Au revoir</code><br><br>What will this code print?<br><pre><code class='language-java'>Locale locale = new Locale(\"fr\", \"CA\");\nResourceBundle rb = ResourceBundle.getBundle(\"messages\", locale);\nSystem.out.println(rb.getString(\"greeting\"));</code></pre>",
      "options": [
        "<code>Hello</code>",
        "<code>Bonjour</code>",
        "<code>Au revoir</code>",
        "MissingResourceException",
        "<code>null</code>",
        "Compilation error"
      ],
      "answer": 1,
      "difficulty": "expert",
      "explanation": "ResourceBundle searches: messages_fr_CA.properties (greeting not found), messages_fr.properties (greeting found = Bonjour). The fallback chain continues until a match is found."
    },
    {
      "topic": "Lambda",
      "type": "single",
      "question": "What is the result?<br><pre><code class='language-java'>List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3));\nlist.forEach(n -> { n = n * 2; });\nlist.replaceAll(n -> n * 2);\nSystem.out.println(list);</code></pre>",
      "options": [
        "<code>[1, 2, 3]</code>",
        "<code>[2, 4, 6]</code>",
        "<code>[4, 8, 12]</code>",
        "UnsupportedOperationException",
        "Compilation error",
        "<code>[null, null, null]</code>"
      ],
      "answer": 1,
      "difficulty": "expert",
      "explanation": "forEach modifies local variable n, not the list. replaceAll actually modifies the list elements, doubling each: [2, 4, 6]."
    },
    {
      "topic": "Generics",
      "type": "multiple",
      "question": "Given:<br><pre><code class='language-java'>class Animal { }\nclass Dog extends Animal { }\nclass Puppy extends Dog { }</code></pre><br>Which assignments are valid?",
      "options": [
        "<code>List<? extends Dog> list = new ArrayList<Puppy>();</code>",
        "<code>List<? super Dog> list = new ArrayList<Animal>();</code>",
        "<code>List<? extends Dog> list = new ArrayList<Animal>();</code>",
        "<code>List<? super Dog> list = new ArrayList<Puppy>();</code>",
        "<code>List<Dog> list = new ArrayList<? extends Dog>();</code>",
        "<code>List<?> list = new ArrayList<Dog>();</code>"
      ],
      "answer": [0, 1, 5],
      "difficulty": "expert",
      "explanation": "? extends Dog accepts Dog and subtypes (Puppy). ? super Dog accepts Dog and supertypes (Animal). Option 3: Animal is not subtype of Dog. Option 4: Puppy is not supertype. Option 5: ? works with any type."
    },
    {
      "topic": "IO",
      "type": "single",
      "question": "What will this code print?<br><pre><code class='language-java'>Path p1 = Path.of(\"/home/user/docs/file.txt\");\nPath p2 = Path.of(\"/home/user\");\nSystem.out.println(p2.relativize(p1));</code></pre>",
      "options": [
        "<code>docs/file.txt</code>",
        "<code>user/docs/file.txt</code>",
        "<code>/docs/file.txt</code>",
        "<code>../user/docs/file.txt</code>",
        "<code>../../docs/file.txt</code>",
        "IllegalArgumentException"
      ],
      "answer": 0,
      "difficulty": "expert",
      "explanation": "relativize() calculates the relative path from p2 to p1. From /home/user to /home/user/docs/file.txt is docs/file.txt."
    },
    {
      "topic": "Threads",
      "type": "single",
      "question": "What is a possible output?<br><pre><code class='language-java'>class Counter {\n    private int count = 0;\n    public void increment() { count++; }\n    public int getCount() { return count; }\n}\nCounter c = new Counter();\nRunnable task = () -> {\n    for(int i = 0; i < 1000; i++) c.increment();\n};\nThread t1 = new Thread(task);\nThread t2 = new Thread(task);\nt1.start(); t2.start();\nt1.join(); t2.join();\nSystem.out.println(c.getCount());</code></pre>",
      "options": [
        "Always <code>2000</code>",
        "Always <code>1000</code>",
        "A number between 1000 and 2000",
        "A number less than 1000",
        "Compilation error",
        "DeadlockException"
      ],
      "answer": 2,
      "difficulty": "expert",
      "explanation": "count++ is not atomic. Race conditions cause lost updates. The result will typically be less than 2000 but more than 1000 due to some increments succeeding and others being lost."
    },
    {
      "topic": "Enums",
      "type": "single",
      "question": "What will this code print?<br><pre><code class='language-java'>enum Status {\n    ACTIVE(1), INACTIVE(0), PENDING(2);\n    private int code;\n    Status(int code) { this.code = code; }\n    public int getCode() { return code; }\n}\nList<Status> list = Arrays.asList(Status.values());\nCollections.sort(list, (s1, s2) -> s1.getCode() - s2.getCode());\nSystem.out.println(list.get(0));</code></pre>",
      "options": [
        "<code>ACTIVE</code>",
        "<code>INACTIVE</code>",
        "<code>PENDING</code>",
        "<code>0</code>",
        "UnsupportedOperationException",
        "Compilation error"
      ],
      "answer": 1,
      "difficulty": "expert",
      "explanation": "Arrays.asList(Status.values()) creates a modifiable list that can be sorted. Sorted by code: INACTIVE(0), ACTIVE(1), PENDING(2). First element is INACTIVE."
    },
    {
      "topic": "Operators",
      "type": "single",
      "question": "What will be printed?<br><pre><code class='language-java'>int x = 5;\nint y = 10;\nboolean result = ++x > 5 && y++ < 11 || x++ > 7;\nSystem.out.println(x + \",\" + y + \",\" + result);</code></pre>",
      "options": [
        "<code>6,10,true</code>",
        "<code>6,11,true</code>",
        "<code>7,11,true</code>",
        "<code>7,10,true</code>",
        "<code>6,10,false</code>",
        "<code>7,11,false</code>"
      ],
      "answer": 1,
      "difficulty": "expert",
      "explanation": "++x makes x=6, 6>5 is true. y++ uses 10 then increments (y=11), 10<11 is true. Since true && true is true, || short-circuits without evaluating x++. Result: x=6, y=11, result=true."
    },
    {
      "topic": "DateTime",
      "type": "single",
      "question": "What will this code print?<br><pre><code class='language-java'>LocalDateTime dt1 = LocalDateTime.of(2024, 1, 31, 10, 0);\nLocalDateTime dt2 = dt1.plusMonths(1);\nSystem.out.println(dt2.getDayOfMonth());</code></pre>",
      "options": [
        "<code>28</code>",
        "<code>29</code>",
        "<code>31</code>",
        "<code>1</code>",
        "DateTimeException",
        "Compilation error"
      ],
      "answer": 0,
      "difficulty": "expert",
      "explanation": "Adding 1 month to Jan 31 results in Feb 29 (or 28 in non-leap year 2024 is leap). Java adjusts to the last valid day of February: 29 for 2024 (leap year)."
    },
    {
      "topic": "Inheritance",
      "type": "single",
      "question": "What will this print?<br><pre><code class='language-java'>class Base {\n    int value = 10;\n    int getValue() { return value; }\n}\nclass Derived extends Base {\n    int value = 20;\n    int getValue() { return value; }\n}\nBase b = new Derived();\nSystem.out.println(b.value + \" \" + b.getValue());</code></pre>",
      "options": [
        "<code>10 10</code>",
        "<code>20 20</code>",
        "<code>10 20</code>",
        "<code>20 10</code>",
        "Compilation error",
        "ClassCastException"
      ],
      "answer": 2,
      "difficulty": "expert",
      "explanation": "Fields are not polymorphic - b.value uses Base's field (10). Methods are polymorphic - getValue() calls Derived's method (20). Result: 10 20."
    },
    {
      "topic": "Streams",
      "type": "multiple",
      "question": "Which statements are true about this code?<br><pre><code class='language-java'>Stream<Integer> s = Stream.of(1, 2, 3, 4, 5);\nlong count = s.peek(System.out::print).count();</code></pre>",
      "options": [
        "It will print 12345",
        "It will not print anything",
        "count() is optimized and may skip peek()",
        "peek() is always executed before count()",
        "The result depends on the JVM implementation",
        "It will print 5"
      ],
      "answer": [1, 2],
      "difficulty": "expert",
      "explanation": "count() can be optimized to avoid processing elements, thus skipping peek(). The JVM typically optimizes count() to not execute intermediate operations like peek()."
    },
    {
      "topic": "Switch",
      "type": "single",
      "question": "What is the result?<br><pre><code class='language-java'>int x = 2;\nString result = switch(x) {\n    case 1 -> \"one\";\n    case 2 -> { yield \"two\"; }\n    case 3 -> \"three\";\n    default -> \"other\";\n};\nSystem.out.println(result);</code></pre>",
      "options": [
        "<code>one</code>",
        "<code>two</code>",
        "<code>three</code>",
        "<code>other</code>",
        "Compilation error - missing break",
        "Compilation error - yield in arrow form"
      ],
      "answer": 1,
      "difficulty": "expert",
      "explanation": "Switch expressions with -> don't need break. Case 2 uses a block with yield to return a value. The code compiles and prints 'two'."
    },
    {
      "topic": "Interfaces",
      "type": "single",
      "question": "What will this print?<br><pre><code class='language-java'>interface A {\n    default void method() { System.out.print(\"A\"); }\n}\nclass B implements A {\n    public void method() { System.out.print(\"B\"); }\n}\nclass C extends B implements A { }\nnew C().method();</code></pre>",
      "options": [
        "<code>A</code>",
        "<code>B</code>",
        "<code>AB</code>",
        "Compilation error in C",
        "Compilation error in B",
        "Runtime error"
      ],
      "answer": 1,
      "difficulty": "expert",
      "explanation": "Class methods take precedence over interface default methods. C inherits B's implementation of method(). Prints 'B'."
    },
    {
      "topic": "Collections",
      "type": "single",
      "question": "What is the output?<br><pre><code class='language-java'>Map<String, Integer> map = new HashMap<>();\nmap.put(\"A\", 1);\nmap.put(\"B\", 2);\nInteger result = map.compute(\"C\", (k, v) -> v == null ? 3 : v + 10);\nSystem.out.println(result + \" \" + map.size());</code></pre>",
      "options": [
        "<code>null 2</code>",
        "<code>3 2</code>",
        "<code>3 3</code>",
        "<code>13 3</code>",
        "NullPointerException",
        "Compilation error"
      ],
      "answer": 2,
      "difficulty": "expert",
      "explanation": "compute() is called with k='C' and v=null (key doesn't exist). The function returns 3, which is stored in the map. Result: 3 is returned, map now has 3 entries."
    },
    {
      "topic": "Serialization",
      "type": "single",
      "question": "Given:<br><pre><code class='language-java'>class Data implements Serializable {\n    private static final long serialVersionUID = 1L;\n    transient int x = 10;\n    int y = 20;\n}</code></pre><br>After serialization and deserialization, what are the values?",
      "options": [
        "x=10, y=20",
        "x=0, y=20",
        "x=10, y=0",
        "x=0, y=0",
        "SerializationException",
        "x=null, y=20"
      ],
      "answer": 1,
      "difficulty": "expert",
      "explanation": "transient fields are not serialized. After deserialization, x gets default value (0), y retains its value (20)."
    },
    {
      "topic": "Pattern Matching",
      "type": "single",
      "question": "What will this print?<br><pre><code class='language-java'>Object obj = \"Hello\";\nif (obj instanceof String s && s.length() > 3) {\n    System.out.print(s.toUpperCase());\n} else {\n    System.out.print(\"no\");\n}</code></pre>",
      "options": [
        "<code>Hello</code>",
        "<code>HELLO</code>",
        "<code>no</code>",
        "Compilation error - s not in scope",
        "ClassCastException",
        "<code>hello</code>"
      ],
      "answer": 1,
      "difficulty": "expert",
      "explanation": "Pattern matching with instanceof creates binding variable s. 'Hello'.length() > 3 is true, so s.toUpperCase() prints 'HELLO'."
    },
    {
      "topic": "Arrays",
      "type": "multiple",
      "question": "Which array operations are valid?",
      "options": [
        "<code>int[] arr = new int[5]; Arrays.fill(arr, 1, 3, 10);</code>",
        "<code>int[] arr = {5, 2, 8}; Arrays.sort(arr, 0, 2);</code>",
        "<code>String[] arr = {\"a\", \"b\"}; Arrays.binarySearch(arr, \"c\");</code>",
        "<code>int[][] arr = new int[3][]; arr[0] = new int[5];</code>",
        "<code>var arr = new int[]{1, 2, 3};</code>",
        "<code>int[] arr = new int[3] {1, 2, 3};</code>"
      ],
      "answer": [0, 1, 2, 3, 4],
      "difficulty": "expert",
      "explanation": "All except option 6 are valid. Option 6 is invalid syntax - when using array initializer, don't specify size: new int[]{1,2,3}."
    },
    {
      "topic": "Control Flow",
      "type": "single",
      "question": "What will this print?<br><pre><code class='language-java'>outer: for (int i = 0; i < 3; i++) {\n    for (int j = 0; j < 3; j++) {\n        if (i == 1 && j == 1) continue outer;\n        System.out.print(i + \"\" + j + \" \");\n    }\n}</code></pre>",
      "options": [
        "<code>00 01 02 10 20 21 22</code>",
        "<code>00 01 02 10 11 12 20 21 22</code>",
        "<code>00 01 02 10 20 21 22</code>",
        "<code>00 01 02 20 21 22</code>",
        "<code>00 01 02 10 12 20 21 22</code>",
        "Compilation error"
      ],
      "answer": 0,
      "difficulty": "expert",
      "explanation": "When i=1 and j=1, continue outer skips to next iteration of outer loop (i=2). Prints: 00 01 02 (i=0), 10 (i=1,j=0), then skips rest of i=1, 20 21 22 (i=2)."
    },
    {
      "topic": "Optional",
      "type": "single",
      "question": "What is the result?<br><pre><code class='language-java'>Optional<String> opt1 = Optional.of(\"test\");\nOptional<String> opt2 = opt1.filter(s -> s.length() > 5);\nString result = opt2.orElseThrow(() -> new RuntimeException(\"Error\"));</code></pre>",
      "options": [
        "<code>test</code>",
        "<code>null</code>",
        "RuntimeException with message 'Error'",
        "NullPointerException",
        "Compilation error",
        "Optional.empty"
      ],
      "answer": 2,
      "difficulty": "expert",
      "explanation": "filter() returns empty Optional because 'test'.length() = 4, not > 5. orElseThrow() throws RuntimeException when Optional is empty."
    }
,
    {
      "topic": "Streams",
      "type": "single",
      "question": "What will the following code print?<br><pre><code class='language-java'>Stream<String> stream = Stream.of(\"a\", \"b\", \"c\", \"d\");\nstream.filter(s -> s.compareTo(\"b\") > 0)\n      .forEach(System.out::print);\nstream.map(String::toUpperCase)\n      .forEach(System.out::print);</code></pre>",
      "options": [
        "<code>cdABCD</code>",
        "<code>cd</code>",
        "IllegalStateException",
        "Compilation error",
        "<code>ABCD</code>",
        "<code>abcdcd</code>"
      ],
      "answer": 2,
      "difficulty": "expert",
      "explanation": "The first forEach() is a terminal operation that consumes the stream. The second attempt to use the same stream throws IllegalStateException because streams can only be used once."
    },
    {
      "topic": "Exception Handling",
      "type": "multiple",
      "question": "Which statements are true about this code?<br><pre><code class='language-java'>try {\n    throw new FileNotFoundException();\n} catch (IOException | SQLException e) {\n    System.out.println(e.getMessage());\n    throw e;\n}</code></pre>",
      "options": [
        "The code compiles successfully",
        "e is effectively final in the catch block",
        "You can assign a new exception to e",
        "The method must declare throws IOException, SQLException",
        "The method must declare throws Exception",
        "FileNotFoundException is caught by the catch block"
      ],
      "answer": [0, 1, 5],
      "difficulty": "expert",
      "explanation": "Multi-catch works, e is effectively final. FileNotFoundException extends IOException, so it's caught. The method must declare throws IOException or SQLException (or their supertypes), not necessarily both."
    },
    {
      "topic": "Inheritance",
      "type": "single",
      "question": "What will this code print?<br><pre><code class='language-java'>class Parent {\n    static { System.out.print(\"1\"); }\n    { System.out.print(\"2\"); }\n    Parent() { System.out.print(\"3\"); }\n}\nclass Child extends Parent {\n    static { System.out.print(\"4\"); }\n    { System.out.print(\"5\"); }\n    Child() { System.out.print(\"6\"); }\n}\nParent p = new Child();</code></pre>",
      "options": [
        "<code>123456</code>",
        "<code>142536</code>",
        "<code>412536</code>",
        "<code>145236</code>",
        "<code>123564</code>",
        "<code>416253</code>"
      ],
      "answer": 1,
      "difficulty": "expert",
      "explanation": "Order: static Parent (1), static Child (4), instance Parent (2), constructor Parent (3), instance Child (5), constructor Child (6). Result: 142536."
    },
    {
      "topic": "Collections",
      "type": "single",
      "question": "What is the output?<br><pre><code class='language-java'>List<Integer> list = List.of(1, 2, 3, 4, 5);\nList<Integer> subList = list.subList(1, 4);\nsubList.set(0, 10);\nSystem.out.println(list);</code></pre>",
      "options": [
        "<code>[1, 2, 3, 4, 5]</code>",
        "<code>[1, 10, 3, 4, 5]</code>",
        "<code>[10, 2, 3]</code>",
        "UnsupportedOperationException",
        "IndexOutOfBoundsException",
        "Compilation error"
      ],
      "answer": 3,
      "difficulty": "expert",
      "explanation": "List.of() creates an immutable list. subList() returns a view, but attempting to modify it via set() throws UnsupportedOperationException."
    },
    {
      "topic": "Modules",
      "type": "single",
      "question": "Which module definition is valid?<br><pre><code class='language-java'>//Option A\nmodule com.example {\n    exports com.example.api;\n    requires java.base;\n}\n\n//Option B\nmodule com.example {\n    exports com.example.api;\n    opens com.example.impl to com.test;\n}\n\n//Option C\nmodule com.example {\n    requires transitive static java.sql;\n}</code></pre>",
      "options": [
        "Only A",
        "Only B",
        "Only C",
        "A and B",
        "B and C",
        "All are valid"
      ],
      "answer": 4,
      "difficulty": "expert",
      "explanation": "A is redundant (requires java.base is implicit). B is valid (qualified opens). C is valid (transitive static is allowed). B and C are correct."
    },
    {
      "topic": "Lambda",
      "type": "single",
      "question": "What will this code print?<br><pre><code class='language-java'>Function<Integer, Integer> f1 = x -> x * 2;\nFunction<Integer, Integer> f2 = x -> x + 10;\nFunction<Integer, Integer> f3 = f1.compose(f2);\nSystem.out.println(f3.apply(5));</code></pre>",
      "options": [
        "<code>20</code>",
        "<code>30</code>",
        "<code>25</code>",
        "<code>15</code>",
        "Compilation error",
        "<code>100</code>"
      ],
      "answer": 1,
      "difficulty": "expert",
      "explanation": "compose executes f2 first, then f1: f2(5) = 15, then f1(15) = 30. (Different from andThen which would do f1 then f2)."
    },
    {
      "topic": "Generics",
      "type": "multiple",
      "question": "Given:<br><pre><code class='language-java'>class Box<T> {\n    private T item;\n    public void set(T item) { this.item = item; }\n    public T get() { return item; }\n}\nBox<? extends Number> box = new Box<Integer>();</code></pre><br>Which operations are valid?",
      "options": [
        "<code>box.set(new Integer(10));</code>",
        "<code>box.set(new Double(10.5));</code>",
        "<code>Number n = box.get();</code>",
        "<code>Object o = box.get();</code>",
        "<code>box.set(null);</code>",
        "<code>Integer i = box.get();</code>"
      ],
      "answer": [2, 3, 4],
      "difficulty": "expert",
      "explanation": "? extends Number is read-only (except null). You can get() as Number or Object, and set(null). Cannot set Integer or Double because the actual type is unknown."
    },
    {
      "topic": "Records",
      "type": "single",
      "question": "What is the result?<br><pre><code class='language-java'>record Point(int x, int y) {\n    Point {\n        x = x * 2;\n        y = y * 2;\n    }\n    public int x() { return x + 1; }\n}\nPoint p = new Point(5, 10);\nSystem.out.println(p.x() + \",\" + p.y());</code></pre>",
      "options": [
        "<code>5,10</code>",
        "<code>10,20</code>",
        "<code>11,20</code>",
        "<code>6,11</code>",
        "Compilation error",
        "<code>5,20</code>"
      ],
      "answer": 2,
      "difficulty": "expert",
      "explanation": "Compact constructor doubles values: x=10, y=20. Custom accessor x() adds 1: returns 11. y() uses generated accessor: returns 20. Result: 11,20."
    },
    {
      "topic": "DateTime",
      "type": "single",
      "question": "What will this print?<br><pre><code class='language-java'>LocalDate d1 = LocalDate.of(2024, 1, 31);\nLocalDate d2 = d1.withMonth(2);\nSystem.out.println(d2);</code></pre>",
      "options": [
        "<code>2024-02-31</code>",
        "<code>2024-02-29</code>",
        "<code>2024-02-28</code>",
        "<code>2024-03-02</code>",
        "DateTimeException",
        "Compilation error"
      ],
      "answer": 1,
      "difficulty": "expert",
      "explanation": "2024 is a leap year. withMonth(2) adjusts January 31 to February, using the last valid day of February in a leap year: the 29th."
    },
    {
      "topic": "IO",
      "type": "single",
      "question": "What will this code print?<br><pre><code class='language-java'>Path p = Path.of(\"C:\\\\temp\\\\..\\\\data\\\\file.txt\");\nSystem.out.println(p.normalize());</code></pre>",
      "options": [
        "<code>C:\\temp\\..\\data\\file.txt</code>",
        "<code>C:\\data\\file.txt</code>",
        "<code>C:\\temp\\data\\file.txt</code>",
        "<code>\\data\\file.txt</code>",
        "IllegalArgumentException",
        "Compilation error"
      ],
      "answer": 1,
      "difficulty": "expert",
      "explanation": "normalize() removes redundant elements. C:\\temp\\.. becomes C:\\, then adds data\\file.txt. Result: C:\\data\\file.txt."
    },
    {
      "topic": "Sealed Classes",
      "type": "multiple",
      "question": "Which declarations are valid?<br><pre><code class='language-java'>sealed class Shape permits Circle { }</code></pre>",
      "options": [
        "<code>final class Circle extends Shape { }</code>",
        "<code>sealed class Circle extends Shape permits Square { }</code>",
        "<code>non-sealed class Circle extends Shape { }</code>",
        "<code>abstract class Circle extends Shape { }</code>",
        "<code>class Circle extends Shape { }</code>",
        "<code>public final class Circle extends Shape { }</code>"
      ],
      "answer": [0, 1, 2, 5],
      "difficulty": "expert",
      "explanation": "Permitted subclasses must be final, sealed, or non-sealed. Option 4 (abstract without modifier) is invalid. Option 5 (just class) is invalid. Options 1,2,3,6 are valid."
    },
    {
      "topic": "Operators",
      "type": "single",
      "question": "What will be printed?<br><pre><code class='language-java'>int a = 10;\nint b = 5;\nSystem.out.println(a > b ? a < b ? a : b : a > b ? b : a);</code></pre>",
      "options": [
        "<code>10</code>",
        "<code>5</code>",
        "<code>true</code>",
        "<code>false</code>",
        "Compilation error",
        "<code>0</code>"
      ],
      "answer": 1,
      "difficulty": "expert",
      "explanation": "Nested ternary: a>b is true, so evaluate a<b?a:b. a<b is false, so return b (5)."
    },
    {
      "topic": "Interfaces",
      "type": "single",
      "question": "What will this print?<br><pre><code class='language-java'>interface I1 {\n    default void print() { System.out.print(\"I1\"); }\n}\ninterface I2 extends I1 {\n    void print();\n}\nclass C implements I2 {\n    public void print() { System.out.print(\"C\"); }\n}\nnew C().print();</code></pre>",
      "options": [
        "<code>I1</code>",
        "<code>C</code>",
        "<code>I1C</code>",
        "Compilation error in I2",
        "Compilation error in C",
        "Runtime error"
      ],
      "answer": 1,
      "difficulty": "expert",
      "explanation": "I2 redeclares print() as abstract, overriding I1's default. C must implement it. Prints 'C'."
    },
    {
      "topic": "Collections",
      "type": "single",
      "question": "What is the output?<br><pre><code class='language-java'>Deque<String> deque = new ArrayDeque<>();\ndeque.push(\"A\");\ndeque.push(\"B\");\ndeque.offerLast(\"C\");\ndeque.poll();\nSystem.out.println(deque);</code></pre>",
      "options": [
        "<code>[A, C]</code>",
        "<code>[C, A]</code>",
        "<code>[A, B]</code>",
        "<code>[B, A]</code>",
        "<code>[B, C]</code>",
        "<code>[A]</code>"
      ],
      "answer": 0,
      "difficulty": "expert",
      "explanation": "push adds to front: [A], [B,A]. offerLast adds to end: [B,A,C]. poll removes from front: [A,C]."
    },
    {
      "topic": "Localization",
      "type": "single",
      "question": "What will this print?<br><pre><code class='language-java'>NumberFormat nf = NumberFormat.getCompactNumberInstance(\n    Locale.US, NumberFormat.Style.SHORT);\nSystem.out.println(nf.format(1500));</code></pre>",
      "options": [
        "<code>1500</code>",
        "<code>1.5K</code>",
        "<code>1K</code>",
        "<code>2K</code>",
        "<code>1,500</code>",
        "Compilation error"
      ],
      "answer": 1,
      "difficulty": "expert",
      "explanation": "CompactNumberInstance with SHORT style formats 1500 as '1.5K' (compact notation)."
    },
    {
      "topic": "Streams",
      "type": "single",
      "question": "What will this code print?<br><pre><code class='language-java'>List<String> list = Arrays.asList(\"1\", \"2\", \"3\");\nlist.stream()\n    .map(Integer::parseInt)\n    .collect(Collectors.summingInt(x -> x));\nSystem.out.println(list.get(0));</code></pre>",
      "options": [
        "<code>1</code>",
        "<code>6</code>",
        "ClassCastException",
        "Compilation error",
        "<code>null</code>",
        "<code>0</code>"
      ],
      "answer": 0,
      "difficulty": "expert",
      "explanation": "The stream operations don't modify the original list. collect() computes sum (6) but doesn't use it. list.get(0) still returns '1' (String)."
    },
    {
      "topic": "Threads",
      "type": "single",
      "question": "What is a possible output?<br><pre><code class='language-java'>List<Integer> list = new CopyOnWriteArrayList<>();\nlist.add(1);\nlist.add(2);\nIterator<Integer> it = list.iterator();\nlist.add(3);\nwhile(it.hasNext()) {\n    System.out.print(it.next());\n}\nSystem.out.print(list.size());</code></pre>",
      "options": [
        "<code>123</code>",
        "<code>1233</code>",
        "<code>12</code>",
        "<code>123</code>",
        "ConcurrentModificationException",
        "<code>1232</code>"
      ],
      "answer": 1,
      "difficulty": "expert",
      "explanation": "CopyOnWriteArrayList iterator works on a snapshot. Iterator sees [1,2] (prints 12), then list.size() is 3. Result: 123."
    },
    {
      "topic": "Enums",
      "type": "single",
      "question": "What will this print?<br><pre><code class='language-java'>enum Color {\n    RED, GREEN, BLUE;\n    public static Color getDefault() { return RED; }\n}\nColor c = null;\nSystem.out.println(c.getDefault());</code></pre>",
      "options": [
        "<code>RED</code>",
        "<code>null</code>",
        "NullPointerException",
        "Compilation error",
        "<code>GREEN</code>",
        "<code>BLUE</code>"
      ],
      "answer": 0,
      "difficulty": "expert",
      "explanation": "Static methods can be called on null references without NPE. c.getDefault() calls the static method and returns RED."
    },
    {
      "topic": "Switch",
      "type": "single",
      "question": "What is the result?<br><pre><code class='language-java'>Integer x = 2;\nvar result = switch(x) {\n    case 1 -> \"one\";\n    case 2 -> { }\n    case 3 -> \"three\";\n    default -> \"other\";\n};\nSystem.out.println(result);</code></pre>",
      "options": [
        "<code>one</code>",
        "<code>two</code>",
        "<code>three</code>",
        "<code>null</code>",
        "Compilation error - case 2 missing yield",
        "Compilation error - incompatible types"
      ],
      "answer": 4,
      "difficulty": "expert",
      "explanation": "Switch expression requires all branches to yield a value. Case 2 has empty block without yield. Compilation error."
    },
    {
      "topic": "Arrays",
      "type": "single",
      "question": "What will this print?<br><pre><code class='language-java'>int[] arr = {5, 2, 8, 1, 9};\nArrays.sort(arr);\nint index = Arrays.binarySearch(arr, 6);\nSystem.out.println(index);</code></pre>",
      "options": [
        "<code>2</code>",
        "<code>-3</code>",
        "<code>-4</code>",
        "<code>3</code>",
        "<code>-2</code>",
        "<code>4</code>"
      ],
      "answer": 2,
      "difficulty": "expert",
      "explanation": "After sort: [1,2,5,8,9]. binarySearch(6) not found. Insertion point is 3 (between 5 and 8). Returns -(3) - 1 = -4."
    },
    {
      "topic": "Pattern Matching",
      "type": "single",
      "question": "What will this print?<br><pre><code class='language-java'>Object obj = Integer.valueOf(10);\nif (obj instanceof Integer i && i > 5) {\n    System.out.print(i * 2);\n}\nSystem.out.print(i);</code></pre>",
      "options": [
        "<code>2010</code>",
        "<code>20</code>",
        "Compilation error - i not in scope",
        "<code>10</code>",
        "ClassCastException",
        "<code>i</code>"
      ],
      "answer": 2,
      "difficulty": "expert",
      "explanation": "Pattern variable i is only in scope within the if block. The second print(i) is outside that scope, causing compilation error."
    },
    {
      "topic": "Serialization",
      "type": "single",
      "question": "Given:<br><pre><code class='language-java'>class Parent implements Serializable {\n    int x = 10;\n}\nclass Child extends Parent {\n    transient int y = 20;\n    int z = 30;\n}</code></pre><br>After serializing and deserializing a Child object, what are the values?",
      "options": [
        "x=10, y=20, z=30",
        "x=10, y=0, z=30",
        "x=0, y=0, z=0",
        "x=10, y=0, z=0",
        "SerializationException",
        "x=0, y=20, z=30"
      ],
      "answer": 1,
      "difficulty": "expert",
      "explanation": "Child doesn't declare Serializable but inherits it from Parent. All serializable fields are preserved except transient y (becomes 0). Result: x=10, y=0, z=30."
    },
    {
      "topic": "Streams",
      "type": "single",
      "question": "What is the output?<br><pre><code class='language-java'>Stream.iterate(1, n -> n + 1)\n      .limit(5)\n      .filter(n -> n % 2 == 0)\n      .forEach(System.out::print);</code></pre>",
      "options": [
        "<code>12345</code>",
        "<code>24</code>",
        "<code>135</code>",
        "<code>246810</code>",
        "Infinite loop",
        "<code>2468</code>"
      ],
      "answer": 1,
      "difficulty": "expert",
      "explanation": "iterate generates [1,2,3,4,5] with limit(5). filter keeps even numbers [2,4]. Prints: 24."
    },
    {
      "topic": "Optional",
      "type": "single",
      "question": "What is the result?<br><pre><code class='language-java'>Optional<String> opt = Optional.ofNullable(null);\nString result = opt\n    .map(String::toUpperCase)\n    .orElse(\"DEFAULT\");\nSystem.out.println(result);</code></pre>",
      "options": [
        "<code>null</code>",
        "<code>DEFAULT</code>",
        "NullPointerException",
        "Compilation error",
        "<code>\"\"</code>",
        "<code>NONE</code>"
      ],
      "answer": 1,
      "difficulty": "expert",
      "explanation": "Optional.ofNullable(null) creates empty Optional. map() is not executed on empty Optional. orElse() returns 'DEFAULT'."
    },
    {
      "topic": "Control Flow",
      "type": "single",
      "question": "What will the following code print?<br><pre><code class='language-java'>int count = 0;\nfor (int i = 0; i < 5; i++) {\n    if (i == 2) continue;\n    count++;\n    if (i == 3) break;\n}\nSystem.out.println(count);</code></pre>",
      "options": [
        "<code>2</code>",
        "<code>3</code>",
        "<code>4</code>",
        "<code>5</code>",
        "<code>1</code>",
        "Infinite loop"
      ],
      "answer": 0,
      "difficulty": "expert",
      "explanation": "i=0: count=1; i=1: count=2; i=2: continue skips count++; i=3: count=3 then break. Wait, recalculating: i=0 count=1, i=1 count=2, i=2 skip, i=3 count=3 then break. Actually count is incremented before break, so it's 3. Correction: The answer should be 1 (option B). Let me recalculate: i=0→count=1, i=1→count=2, i=2→continue (no count++), i=3→count=3 then break. Answer is 2."
    },
    {
      "topic": "Collections",
      "type": "multiple",
      "question": "Given:<br><pre><code class='language-java'>Map<String, Integer> map = new TreeMap<>();\nmap.put(\"C\", 3);\nmap.put(\"A\", 1);\nmap.put(\"B\", 2);\nmap.put(null, 0);</code></pre><br>Which statements are true?",
      "options": [
        "The code will compile successfully",
        "A NullPointerException will be thrown at line 5",
        "The map will contain 4 entries",
        "The map will be sorted by keys in natural order",
        "TreeMap does not allow null keys",
        "The map will contain 3 entries after execution"
      ],
      "answer": [0, 1, 4, 5],
      "difficulty": "expert",
      "explanation": "TreeMap does not allow null keys. The first three put() operations succeed and the map is sorted (A,B,C). The put(null,0) throws NullPointerException. If exception handling were present, the map would have 3 entries."
    }
  ]
}